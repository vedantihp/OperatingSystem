#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main()
{
 int n; // number of pages in reference string
 cout << "Enter the number of pages in reference string: ";
 cin >> n;
 int ref_string[n]; // array to hold reference string
cout << "Enter the reference string: ";
 for (int i = 0; i < n; i++)
 {
 cin >> ref_string[i];
 }
 int num_frames; // number of frames in physical memory
 cout << "Enter the number of frames in physical memory: ";
 cin >> num_frames;
 vector<int> frames; // vector to hold frames in physical memory
 int page_faults = 0; // counter for page faults
 // iterate through reference string
 for (int i = 0; i < n; i++)
 {
 bool page_found = false;
 // check if page is already in physical memory
 for (int j = 0; j < frames.size(); j++)
 {
 if (frames[j] == ref_string[i])
 {
 page_found = true;
 break;
 }
 }
 // if page is not in physical memory, find optimal page to replace
 if (!page_found)
 {
 page_faults++;
 // if physical memory is not yet full, simply add page to frames vector
 if (frames.size() < num_frames)
 {
 frames.push_back(ref_string[i]);
 }
 // otherwise, find page that will not be used for the longest time in future
 else
 {
int index_to_replace = -1;
 int max_future_distance = -1;
 for (int j = 0; j < frames.size(); j++)
 {
 int future_distance = 0;
 for (int k = i + 1; k < n; k++)
 {
 if (frames[j] == ref_string[k])
 {
 future_distance = k - i;
 break;
 }
 }
 if (future_distance == 0)
 {
 index_to_replace = j;
 break;
 }
 else if (future_distance > max_future_distance)
 {
 index_to_replace = j;
 max_future_distance = future_distance;
 }
 }
 frames[index_to_replace] = ref_string[i];
 }
 }
 // print current state of physical memory
 for (int j = 0; j < frames.size(); j++)
 {
 cout << frames[j] << " ";
 }
 cout << endl;
 }
 cout << "Total number of page faults: " << page_faults << endl;
return 0;
}
